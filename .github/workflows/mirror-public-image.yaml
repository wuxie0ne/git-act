name: 'Smart Mirror Public Docker Image'

on:
  workflow_dispatch:
    inputs:
      source_image:
        description: 'Public image to pull (e.g., python:3.9-slim)'
        required: true
      destination_image_override:
        description: '(Optional) Override the auto-generated destination path.'
        required: false

jobs:
  smart-mirror:
    runs-on: ubuntu-latest
    steps:
      - name: Log in to private registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate Destination Image Name
        id: generate_name
        env:
          # 将 Variable 加载到环境变量中，方便脚本使用
          # {
          #   "docker.io": "mirror-docker",
          #   "ghcr.io": "mirror-ghcr",
          #   "k8s.gcr.io": "mirror-gcr",
          #   "quay.io": "mirror-quay"
          # }          
          MIRROR_MAP: ${{ vars.MIRROR_MAP }}
        run: |
          SOURCE="${{ github.event.inputs.source_image }}"
          if [ -n "${{ github.event.inputs.destination_image_override }}" ]; then
            echo "dest_image=${{ github.event.inputs.destination_image_override }}" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # 默认行为：处理 'alpine:3.21' 这种官方镜像
          DEST="mirror-docker.library.$SOURCE"

          # 如果源镜像包含'/'，说明它有仓库地址或用户名
          if [[ "$SOURCE" == *"/"* ]]; then
            HOSTNAME=$(echo $SOURCE | cut -d'/' -f1)
            IMAGE_PATH=$(echo $SOURCE | cut -d'/' -f2-)
            
            # 使用 jq 在 MIRROR_MAP 中查找 HOSTNAME
            # jq -r '.key' 可以安全地提取 value，如果不存在则返回 null
            PREFIX=$(echo "$MIRROR_MAP" | jq -r --arg key "$HOSTNAME" '.[$key]')

            if [ "$PREFIX" != "null" ] && [ -n "$PREFIX" ]; then
              # 成功在 map 中找到前缀
              DEST="$PREFIX.$IMAGE_PATH"
            elif [[ "$HOSTNAME" != *"."* ]]; then
              # 未在 map 中找到，且不含'.', 认为是 Docker Hub 用户, e.g., 'bitnami/nginx'
              DEST="mirror-docker.$HOSTNAME.$IMAGE_PATH"
            else
              # 未在 map 中找到，但是一个域名，使用通用规则
              # e.g., registry.example.com -> mirror-registry-example-com
              SAFE_PREFIX=$(echo $HOSTNAME | tr '.' '-')
              DEST="mirror-unknown.$SAFE_PREFIX.$IMAGE_PATH"
            fi
          fi
          
          echo "Generated destination: $DEST"
          echo "dest_image=$DEST" >> $GITHUB_OUTPUT

      # 使用上一步生成的名称
      - name: Pull, Tag, and Push
        run: |
          SOURCE_IMAGE="${{ github.event.inputs.source_image }}"
          # 从上一步的输出中读取目标镜像名称
          DESTINATION_IMAGE="${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_NAMESPACE }}/${{ steps.generate_name.outputs.dest_image }}"
          echo "Pulling $SOURCE_IMAGE"
          docker pull $SOURCE_IMAGE
          
          echo "Tagging as $DESTINATION_IMAGE"
          docker tag $SOURCE_IMAGE $DESTINATION_IMAGE
          
          echo "Pushing $DESTINATION_IMAGE"
          docker push $DESTINATION_IMAGE